# Install mysql and change its config files

- name: Install mysql
  ansible.builtin.apt:
    name: mysql-server

- name: Listen public
  template:
    src: override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
  notify: Restart mysql

- name: Start mysql service
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: true

# Configure mysql

- name: Install python3-pymysql
  ansible.builtin.apt:
    name: python3-pymysql

- name: MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

# Configure user settings

- name: MySQL user
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock 
  no_log: true

# mysql prometheus integration

- name: Configure mysql exporter credentials
  template:
    src: exporter_my.cnf.j2
    dest: /var/lib/prometheus/.my.cnf
  no_log: true
  notify: Restart mysql-exporter

- name: Create mysql exporter user
  community.mysql.mysql_user:
    name: "{{mysql_exporter_user}}"
    password: "{{mysql_exporter_password}}"
    host: "%"
    resource_limits:
      MAX_USER_CONNECTIONS: 3
    priv: "*.*:PROCESS/*.*:REPLICATION CLIENT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify: Restart mysql-exporter

- name: Install prometheus-mysqld-exporter
  apt: 
    name: prometheus-mysqld-exporter

# Replica Lab

- name: Export replica status
  copy:
    src: prometheus-mysqld-exporter
    dest: /etc/default/prometheus-mysqld-exporter
  notify: Restart mysql-exporter    

- name: Add mysql replication user
  community.mysql.mysql_user:
    name: "{{ mysql_replication_username }}"
    password: "{{ mysql_replication_password }}"
    host: "%"
    priv: "*.*:REPLICATION SLAVE"
    login_unix_socket: /var/run/mysqld/mysqld.sock 

- name: Configure mysql dynamic variables for replica
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

# configure backup process for mysql

- name: Create backup directory for mysql
  file:
    path: /home/backup/mysql
    state: directory
    owner: backup
    group: backup
    mode: 0777

- name: Create mysql backup user
  community.mysql.mysql_user:
    name: "{{mysql_backup_user}}"
    password: "{{mysql_backup_password}}"
    host: "%"
    resource_limits:
      MAX_USER_CONNECTIONS: 3
    priv: "agama.*:SELECT,LOCK TABLES"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Create backup user credentials to access mysql
  template:
    src: backup_my.cnf.j2
    dest: /home/backup/.my.cnf
    owner: backup
    group: backup
    mode: 0600
  no_log: true

- name: Create scheduled mysql backup task with cron
  template:
    src: cron-mysql-backup.j2
    dest: /etc/cron.d/mysql-backup
    
- name: Add mysql A records
  include_role:
    name: dns_record
    tasks_from: add_dns_records
  vars:
    record: "mysql-{{server_index + 1}}"
    value: "{{ item }}"
    type: "CNAME"
  loop: "{{ groups['db_servers'] }}"
  loop_control:
    index_var: server_index